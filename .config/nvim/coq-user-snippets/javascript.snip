snippet node_test_template
alias ntestt
  import { test, afterEach } from 'node:test';
  import assert from 'assert/strict';
  import sinon from 'sinon';

  const s = sinon.createSandbox();

  afterEach(() => {
    s.restore();
  });

  test("replace console log", () => {
    const fake = s.fake.returns("42");
    s.replace(console, "log", fake);
    assert.equal(console.log("foo"), "42")
  })

snippet node_test_imports
alias ntesti
  import { test } from 'node:test';
  import assert from 'assert/strict';


snippet FastifyRouteTest
  import { test, afterEach } from 'node:test';
  import assert from 'assert/strict';
  import fastify from 'fastify';
  import sinon from 'sinon';

  // custom imports goes here
  import { myRoute } from './someapi.mjs';

  afterEach(() => {
    sinon.restore();
  });

  // mock dependency
  const repository = {
    find: () => Promise.reject(new Error('not implemented')),
  };

  // create Fastify test instance
  const server = fastify();
  
  // register route and inject dependencies
  server.route(myRoute({ repository }));

  test('find my resource', async () => {
    // expected response
    const resource = {
      foo: 'bar',
    };
    sinon.replace(
      repository,
      'find',
      sinon.fake.resolves(resource)
    );

    const response = await server.inject({
      method: 'GET',
      url: '/123',
      headers: { 'content-type': 'application/json' },
    });

    assert.equal(response.statusCode, 200);
    assert.deepEqual(response.json(), resource);
  });


snippet FastifyRoute
  export function myRoute(/* inject dependencies here */) {
    return {
      method: 'GET',
      url: '/:id',
      schema: {
        headers: {
          'x-request-id': {
            type: 'string'
          }
        },
        params: {
          id: {
            type: 'string'
          }
        } 
        response: {
          200: {
            message: {
              type: 'string'
            }
          },
        },
      },
      preHandler: [/* auth, logging, etc */],
      handler: async (request, reply) => {
        /* handle request */
        reply.callNotFound();
      },
    };
  }
